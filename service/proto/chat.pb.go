// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/proto/chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChatMessage struct {
	UserId               string   `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_91bfe0173504ec92, []int{0}
}
func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (dst *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(dst, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatMessage)(nil), "ChatMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServerClient is the client API for ChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServerClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServer_ChatClient, error)
}

type chatServerClient struct {
	cc *grpc.ClientConn
}

func NewChatServerClient(cc *grpc.ClientConn) ChatServerClient {
	return &chatServerClient{cc}
}

func (c *chatServerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServer_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatServer_serviceDesc.Streams[0], "/ChatServer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerChatClient{stream}
	return x, nil
}

type ChatServer_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServerChatClient struct {
	grpc.ClientStream
}

func (x *chatServerChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServerChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServerServer is the server API for ChatServer service.
type ChatServerServer interface {
	Chat(ChatServer_ChatServer) error
}

func RegisterChatServerServer(s *grpc.Server, srv ChatServerServer) {
	s.RegisterService(&_ChatServer_serviceDesc, srv)
}

func _ChatServer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServerServer).Chat(&chatServerChatServer{stream})
}

type ChatServer_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatServerChatServer struct {
	grpc.ServerStream
}

func (x *chatServerChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServerChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChatServer",
	HandlerType: (*ChatServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatServer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/proto/chat.proto",
}

func init() { proto.RegisterFile("service/proto/chat.proto", fileDescriptor_chat_91bfe0173504ec92) }

var fileDescriptor_chat_91bfe0173504ec92 = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xce, 0x48, 0x2c, 0xd1, 0x03,
	0x33, 0x95, 0xec, 0xb9, 0xb8, 0x9d, 0x33, 0x12, 0x4b, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x85, 0xc4, 0xb8, 0xd8, 0x42, 0x8b, 0x53, 0x8b, 0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0xa0, 0x3c, 0x21, 0x09, 0x2e, 0x76, 0xa8, 0x12, 0x09, 0x26, 0xb0, 0x04, 0x8c, 0x6b, 0x64,
	0xc6, 0xc5, 0x05, 0x32, 0x20, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0x48, 0x83, 0x8b, 0x05, 0xc4,
	0x13, 0xe2, 0xd1, 0x43, 0x32, 0x55, 0x0a, 0x85, 0xa7, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0x98, 0xc4,
	0x06, 0xb6, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xeb, 0x84, 0x9f, 0x9b, 0x00, 0x00,
	0x00,
}
